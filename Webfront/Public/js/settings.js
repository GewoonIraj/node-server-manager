window.addEventListener('load', () => {
    var Password = null
    document.querySelectorAll('*[data-setting]').forEach(setting => {
        if (setting.hasAttribute('disabled')) return
        setting.addEventListener('click', async (e) => {
            if (setting.getAttribute('data-setting') != 'auth-2fa' || 
               (setting.getAttribute('data-setting') == 'auth-2fa' && !clientSettings.Settings.TwoFactor)) {
                Password = Password ? Password : await askPassword()
            }

            switch (setting.getAttribute('data-setting')) {
                case 'auth-token':
                    await makeFormRequest('POST', `/auth/changesetting?setting=TokenLogin&value=${!clientSettings.Settings.TokenLogin}`, `password=${Password}`)
                    window.location.reload()
                break
                case 'auth-2fa':
                    if (!clientSettings.Settings.TwoFactor) {
                        var enable = document.querySelector('*[data-2fa-enable]')
                        var secret = JSON.parse(await makeFormRequest('GET', '/auth/2fa?action=request', null))
                        enable.querySelector('*[data-2fauth-link]').src = secret.secret.qr
                        enable.querySelector('*[data-2fauth-code]').innerHTML = secret.secret.secret
                        enable.style.display = 'block'
                        var button = enable.querySelector('*[data-2fa-confirm]')
                        button.onclick = () => {
                            messageBox('Enter the code generated by your authenticator:', [{
                                type: 'password',
                                name: 'token',
                                placeholder: '2FA Code'
                            }], 'Cancel', 'Ok', async (params, messageBox, closeMessagebox) => {
                                var result = JSON.parse(await makeFormRequest('POST', '/auth/2fa?action=enable', `password=${Password}&token=${params.token}`))
                                result.success ? (closeMessagebox(), window.location.reload()) : (messageBox.setText('Incorrect code'))
                            })
                        }
                    } else {
                        messageBox('Enter your password and the code generated by your authenticator:', [
                            { type: 'password', name: 'password', placeholder: 'Password' },
                            { type: 'password', name: 'token', placeholder: '2FA Code' }
                        ], 'Cancel', 'Ok', async (params, messageBox, closeMessagebox) => {
                            var result = JSON.parse(await makeFormRequest('POST', '/auth/2fa?action=disable', `password=${params.password}&token=${params.token}`))
                            result.success ? (closeMessagebox(), window.location.reload()) : (messageBox.setText('Incorrect code'))
                        })
                    }
                break
                case 'auth-ingame':
                    await makeFormRequest('POST', `/auth/changesetting?setting=InGameLogin&value=${!clientSettings.Settings.InGameLogin}`, `password=${Password}`)
                    window.location.reload()
                break
            }
        })
    })
})

function askPassword() {
    return new Promise((resolve, reject) => {
        messageBox('Please enter your password:', [{
            type: 'password',
            name: 'password',
            placeholder: 'Password'
        }], 'Cancel', 'Ok', async (params, messageBox, closeMessagebox) => {
            var result = JSON.parse(await makeFormRequest('POST', '/auth/auth?_=password', `password=${params.password}`))
            result.success ? (closeMessagebox(), resolve(params.password)) : (messageBox.setText('Incorrect password'))
        })
    })
}